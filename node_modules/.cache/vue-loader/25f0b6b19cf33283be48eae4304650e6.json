{"remainingRequest":"/Users/carlyrabagliati/Downloads/esamematec-copia2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/carlyrabagliati/Downloads/esamematec-copia2/src/components/FormRecensioni.vue?vue&type=template&id=4882d170&","dependencies":[{"path":"/Users/carlyrabagliati/Downloads/esamematec-copia2/src/components/FormRecensioni.vue","mtime":1635331230195},{"path":"/Users/carlyrabagliati/Downloads/esamematec-copia2/node_modules/cache-loader/dist/cjs.js","mtime":1635322804264},{"path":"/Users/carlyrabagliati/Downloads/esamematec-copia2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1635322811365},{"path":"/Users/carlyrabagliati/Downloads/esamematec-copia2/node_modules/cache-loader/dist/cjs.js","mtime":1635322804264},{"path":"/Users/carlyrabagliati/Downloads/esamematec-copia2/node_modules/vue-loader/lib/index.js","mtime":1635322808572}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}